!! SHIFT - Test of the shift hardware.
!
!  Copyright (C)  Three Rivers Computer Corporation,  1981, 1982, 1983.
!
!
!  SHIFT - Change log.
!
!  V1.0  EHL  05 Oct 81  Standardize the diagnostic to make it easy to use.
!
!
!! ****** SHIFT ******

!   Shift is a pattern sensitive test of the shift hardware. It tests the
! rotate, rightshift, and the leftshift functions. The tests are made on every
! shift command and data pattern combination possible. These shift commands
! pertain only to processer shift functions. Raster-op and Field functions are
! not tested here.
!
!   Their are two modes of tests performed.
!
! Mode One: Execute a "SHIFTONR" special function operation of the "SF" field 
!           of the micro word. "SHIFTONR" meaning shift on result. The shift
!           command is placed in register "SHFUNC" and the pattern is placed
!           in register "PATTERN". The micro instruction is then executed.
!
! Mode Two: Execute the shift function via the "Z-FIELD" of the micro word. The
!           shift command is taken from register "SHFUNC" and coded into the
!           "Z-FIELD". The pattern is placed in register "PATTERN". The micro
!           instruction is then executed.
!
!   When either the SHIFTONR or the Z-FIELD function is performed, the test
! goes to the shift function simulator. The simulator will duplicate the shift
! operation by doing arithmetic type operations. It will compare the results
! of the two operations to determine if the shift operation was successful. If
! the operation was successful the test will continue with another pattern or
! shift command. The test will go through all patterns and shift commands in
! this fashion. When complete,the test will exit with a:
!
!           Breakpoint 100   -GOOD RETURN
!
!   When an error is detected the simlator will report the error in one of 
! two ways:
!
!           Breakpoint 10X   -ERROR DETECTED DURING A "SHIFTONR" FUNCTION
!
!           Breakpoint 11X   -ERROR DETECTED DURING A "Z-FIELD" FUNCTION
!
!   Where X is equal to
!
!           1 -ROTATE FAILURE
!           2 -RIGHTSHIFT FAILURE
!           3 -LEFTSHIFT FAILURE
!
!   Contained within this diagnostic are a number of routines that can be used
! as troubleshooting aids. They do such things as looping on a set shift
! command and data pattern, and doing a single shift function and returning to
! the kernal. There is one routine that can be used manually, that will display
! on the screen a picture of shifted data. More information can be found at 
! the beginning of the "Shift Magification" routine.


define(Result, 1);
define(R0, 0);
define(SShouldBe,7);
define(Pattern, 3);
define(cnt,4);
define(ShFunc,5);
define(ShType,6);
define(SMask,10);
define(error,370);
define(tmp,2);






! Loops for trouble shooting. If R0 is non zero then loop for ever

           R0, Loc(0);
           If NEQ GoTo(Lp1);
        
Lp:        ShFunc, ShiftOnR;
           Pattern;
           Result := Shift, GoTo(7401);

Lp1:       ShFunc, ShiftOnR;
           Pattern;
           Result := Shift, GoTo(Lp1);
        
        
ShTest:    Cnt := 0, Loc(2400);
           ShFunc := 215;
           ShType := 0;                     !type 0 - rotate
RotLoop:   Pattern := 1;
           Call(DoPattern);
           Cnt := Cnt + 1;
           ShFunc := ShFunc + 20;
           Cnt - 10;
           if neq goto(RotChk);
           ShFunc := 216;
RotChk:    Cnt - 20;
           if neq goto(RotLoop);
           Cnt := 0;
           ShFunc := 17;
           ShType := 1;                     !type 1 - RightShift
RShLoop:   Pattern := 1;
           Call(DoPattern);
           ShFunc := ShFunc + 17;
           Cnt := Cnt + 1;
           Cnt - 20;
           if neq goto(RShLoop);
           Cnt := 0;
           ShFunc := 17;
           ShType := 2;                     !type 2 - LeftShift
LShLoop:   Pattern := 1;
           Call(DoPattern);
           Cnt := Cnt + 1;
           ShFunc := ShFunc + 20;
           Cnt - 20;
           if neq goto(LShLoop);
Good:      Error := 100, GoTo(7401);        ! Good pass, exit



 
DoPattern: Error := 100;
 
           ShFunc, ShiftOnR;
           Pattern;
           Result := Shift, Call(SimFunc);
           tmp := ShFunc;
           tmp := tmp + tmp;
           tmp := tmp + tmp;
           tmp := tmp + tmp;
           tmp := tmp + tmp;
           tmp := tmp + tmp;
           tmp := tmp + tmp;
           tmp := tmp + tmp;
           tmp := tmp + tmp;
           LoadS(ShiftMe);
           Error := 110;
           tmp or 77;  !Set A to (inverted) 6
           WcsLow, if true gotoS(GetReady);
GetReady:  RightShift(1);                 !Cause a transition of shift control
           100, Store;
           000;
ShiftMe:   Pattern, LeftShift(0), Next;   !****Modified****
           Result := Shift, Fetch, call(SimFunc);
NextPat:   Pattern := Pattern + 1;
           if neq goto(DoPattern);
           Return;
           
           
! ***** SHIFT FUNCTION SIMULATOR *****
!   The shift function simulator, when called will simulate the function just
! performed by the shift hardware, with arithmetic-type operations. It will
! compare the result of the shift operation with the result of the arithmetic
! operation to see if they are equal. If the two results are equal it will 
! exit and go back for another shift operation. If the two results are not
! equal an error had occured. At the detection of the error, the simulator 
! will do one of the following.
!
!       Add a one to register "ERROR" for rotate failures
!       Add a two to register "ERROR" for rightshift failures
!       Add a three to register "ERROR" for leftshift failures
!
! Register "ERROR" previously had been loaded with one of two base values.
! They are:
!
!       100  for SHIFTONR  operations
!       110  for Z-FIELD  operations
!
! After register "ERROR" has been updated, the simulator then exits to the
! shift magnification routine.



SimFunc:   ShType;
           ShType - 1,if eql goto(RotPat);
           if eql goto(RShPat);
LshPat:    tmp := cnt;                    ! Test Leftshift
           SShouldBe := Pattern;
LshLp:     tmp := tmp - 1;
           if lss goto(LshDone);
           SShouldBe := SShouldBe + SShouldBe, GoTo(LshLp);
LshDone:   Result - SShouldBe;
           if eql return;
           error := error + 3, GoTo(enter);   ! Leftshift error
RotPat:    tmp := 20;                !Right Rotate of N = LeftRotate of 16. - n
           tmp := tmp - cnt;
           SShouldBe := Pattern;
RotLp:     tmp := tmp - 1;
           if lss goto(RotDone);
           SShouldBe := SShouldBe + SShouldBe;
           SShouldBe := SShouldBe + 0 + OldCarry, GoTo(RotLp);
RotDone:   Result - SShouldBe;
           if eql return;
           error := error + 1, goto(enter);   ! Rotate error
RshPat:    tmp := 20;                !Right Shift of N = LeftRotate of 16. - n
                                     !anded with a mask
           tmp := tmp - cnt;
           SMask := 0;
           SShouldBe := Pattern;
RshLp:     tmp := tmp - 1;
           if lss goto(RshDone);
           SMask := SMask + SMask;
           SMask := SMask + 1;
           SShouldBe := SShouldBe + SShouldBe;
           SShouldBe := SShouldBe + 0 + OldCarry, GoTo(RshLp);
RshDone:   SShouldBe := SShouldbe and SMask;
           Result - SShouldBe;
           if eql return;
           error := error + 2, goto(enter);   ! Rightshift error
 
 
 
! ***** SHIFT MAGNIFICATION *****
! written by John Rose
!            Ed Lampert   5 Oct 81
!
!   This is an addendum to the shift test program. Its intent is to display
! on the screen an enlarged view of the shifted data. The display will show
! the results of all the shift commands using register "PATTERN",(R3), as
! the data.
!
!   The format for the display is in three groups, ROTATE, LEFTSHIFT,
! and RIGHTSHIFT. "Bit 15" is the far lefthand column and "Bit 0" is the far
! righthand column. The bits are shown as big and small spots. A big spot
! represents a one and a small spot represents a zero.
!
!   This routine can be used as a stand alone routine, without entering the
! shift test itself. The entry point of the routine is at location "100".
! Typing "GO 100" to "ODTPRQ" will start the routine. When used in this manner
! it will end with a "BREAKPOINT 77". This will show the routine was run
! manually.


define(r3,3);         ! PATTERN register
define(r21,21);       ! spot address
define(r22,22);       ! spot data - general purpose
define(r23,23);       ! stot size
define(r24,24);       ! mark address
define(r25,25);       ! mark number
define(r26,26);       ! line address
define(r27,27);       ! general purpose
define(r30,30);       ! group address
define(r31,31);       ! all ones
define(r32,32);       ! start address
define(r33,33);       ! shift data



enter1:  error := 77, Loc(100);
enter:   r32:= 17010;                            ! LOAD SCREEN STARTING ADDRESS
         r31:= 177777;                           ! LOAD ALL ONES
         call(start);                            ! GO INIT THE SCREEN
         r26:= r32;                              ! INIT THE LINE ADDRESS           
         r3, Rotate(0);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(1);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(2);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(3);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(4);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(5);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(6);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(7);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(10);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(11);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(12);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(13);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(14);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(15);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(16);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rotate(17);
         r33 := Shift, call(line);
         call(bittst);
         
         call(group);                         ! Insert a gap between the group
         
         r3, Leftshift(0);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(1);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(2);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(3);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(4);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(5);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(6);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(7);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(10);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(11);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(12);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(13);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(14);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(15);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(16);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Leftshift(17);
         r33 := Shift, call(line);
         call(bittst);
         
         call(group);                          ! Insert a gap between the group         
         r3, Rightshift(0);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(1);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(2);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(3);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(4);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(5);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(6);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(7);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(10);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(11);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(12);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(13);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(14);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(15);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(16);
         r33 := Shift, call(line);
         call(bittst);
         
         r3, Rightshift(17);
         r33 := Shift, call(line);
         call(bittst);
         
ErrorExit:    goto(7401);



         ! This is the bit test routine. It will test each bit.

bittst:  r24:= r26;                          ! Init the mark address


         r27:= 100000;       
         r33 and r27,call(spot);
         
         r27:= 40000;         
         r33 and r27,call(spot);
         
         r27:= 20000;         
         r33 and r27,call(spot);
         
         r27:= 10000;         
         r33 and r27,call(spot);
         
         r27:= 4000;         
         r33 and r27,call(spot);
         
         r27:= 2000;         
         r33 and r27,call(spot);
         
         r27:= 1000;         
         r33 and r27,call(spot);
         
         r27:= 400;         
         r33 and r27,call(spot);
         
         r27:= 200;         
         r33 and r27,call(spot);
         
         r27:= 100;         
         r33 and r27,call(spot);
         
         r27:= 40;         
         r33 and r27,call(spot);
         
         r27:= 20;         
         r33 and r27,call(spot);
         
         r27:= 10;         
         r33 and r27,call(spot);
         
         r27:= 4;         
         r33 and r27,call(spot);
         
         r27:= 2;         
         r33 and r27,call(spot);
         
         r27:= 1;         
         r33 and r27,call(spot);
         
         return;         
         
        ! This routine will draw the spot on the screen. It will draw a small
        ! spot for a zero and a big spot for a one.



         
spot:   if eql goto(small);           ! error or no error
        r22:= r31,goto(spot1);        ! error! big spot
small:  r22:= 140000;                 ! no error small spot
spot1:  r23:= 0;                      ! clear the counter
        r21:= r24;                    ! get current mark address
spot2:  r21,store;                    ! send the address and store
        r22;                          ! send the data
        r23:= r23+1;                  ! add one to the counter
        r21:= r21+60;                 ! add one line to the spot address
        r23-5;                        ! five lines ?
        if neq goto(spot2);           ! no go back
        r24:= r24+2;                  ! update the mark address
        return;                       ! leave
        
        
        ! This routine will control the spacing between the lines
        
        
line:   r22:= 0;                       ! clear the counter
                
line1:  r26:= r26+60;                  ! add one to the counter
        r22:= r22+1;                   ! add one to the counter
        r22-20;                        ! twenty octal lines ?
        if neq goto(line1);            ! no go back
        return;                        ! leave
       
       
       
        ! This routine will control the spacing between the three
        ! shift functions
        
        
group:   r22:= 0;                     ! clear the counter
group1:  r26:= r26+60;                ! add one line to it
         r22:= r22+1;                 ! add one to the counter
         r22-20;                      ! 20 lines ?
         if neq goto(group1);         ! no go back
         return;                      ! leave
         
         
        ! This routine will draw all the letters on the screen.
        ! It is long and not very exciting.
        
        


        ! Routine to write characters in memory
        
char:    r21,store;
         r22;
         r21:= r21+60;
         return;
         
         
        ! Routine to form the character data
        
start:   r21:= r32;                   ! Get the screen starting address
         r22:= 0;
start1:  r21:= r21-60;
         r22:= r22+1;
         r22-25;
         if neq goto(start1);
         r22:= 030377;                ! Draw #15
         call(char);
         r22:= 070377;
         call(char);
         r22:= 170300;
         call(char);
         r22:= 170300;
         call(char);
         r22:= 030300;
         call(char);
         r22:= 030300;
         call(char);
         r22:= 030374;
         call(char);
         r22:= 030376;
         call(char);
         r22:= 030003;
         call(char);
         r22:= 030003;
         call(char);
         r22:= 030003;
         call(char);
         r22:= 030003;
         call(char);
         r22:= 030003;
         call(char);
         r22:= 030003;
         call(char);
         r22:= 176376;
         call(char);
         r22:= 176374;
         call(char);
         r22:= 0;
start5:  r21:= r21-60;
         r22:= r22+1;
         r22-20;
         if neq goto(start5);
         r21:= r21+36;
         r22:= 000074;                ! Draw #0
         call(char);
         r22:= 000176;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000307;
         call(char);
         r22:= 000313;
         call(char);
         r22:= 000323;
         call(char);
         r22:= 000343;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000303;
         call(char);
         r22:= 000176;
         call(char);
         r22:= 000074;
         call(char);
         r21:= r21+3;
         r22:= 0;
start2:  r21:= r21+60;
         r22:= r22+1;
         r22-150;
         if neq goto(start2);
         r22:= 030070;              ! Draw "RR"
         call(char);
         r22:= 074174;
         call(char);
         r22:= 146306;
         call(char);
         r22:= 146306;
         call(char);
         r22:= 146306;
         call(char);
         r22:= 146306;
         call(char);
         r22:= 174674;
         call(char);
         r22:= 174374;
         call(char);
         r22:= 154314;
         call(char);
         r22:= 154314;
         call(char);
         r22:= 154314;
         call(char);
         r22:= 154314;
         call(char);
         r22:= 156316;
         call(char);
         r22:= 144306;
         call(char);
         r22:= 146306;
         call(char);
         r22:= 146306;
         call(char);
         r22:= 146306;
         call(char);
         r22:= 0;
start3:  r21:= r21+60;
         r22:= r22+1;
         r22-377;
         if neq goto(start3);
         r22:= 140077;              ! Draw "LS"
         call(char);
         r22:= 140177;
         call(char);
         r22:= 140177;
         call(char);
         r22:= 140300;
         call(char);
         r22:= 140300;
         call(char);
         r22:= 140300;
         call(char);
         r22:= 140300;
         call(char);
         r22:= 140300;
         call(char);
         r22:= 140174;
         call(char);
         r22:= 140076;
         call(char);
         r22:= 140003;
         call(char);
         r22:= 140003;
         call(char);
         r22:= 140003;
         call(char);
         r22:= 140003;
         call(char);
         r22:= 140003;
         call(char);
         r22:= 140003;
         call(char);
         r22:= 176376;
         call(char);
         r22:= 176374;
         call(char);
         r22:= 176374;
         call(char);
         r22:= 0;
start4:  r21:= r21+60;
         r22:= r22+1;
         r22-377;
         if neq goto(start4);
         r22:= 030077;               ! Draw "RS"
         call(char);
         r22:= 074177;
         call(char);
         r22:= 146300;
         call(char);
         r22:= 146300;
         call(char);
         r22:= 146300;
         call(char);
         r22:= 146300;
         call(char);
         r22:= 146300;
         call(char);
         r22:= 174371;
         call(char);
         r22:= 174076;
         call(char);
         r22:= 154003;
         call(char);
         r22:= 154003;
         call(char);
         r22:= 154003;
         call(char);
         r22:= 154003;
         call(char);
         r22:= 156003;
         call(char);
         r22:= 146003;
         call(char);
         r22:= 146003;
         call(char);
         r22:= 146376;
         call(char);
         r22:= 146374;
         call(char);
         return;
        
                  
         
         end;
                          
