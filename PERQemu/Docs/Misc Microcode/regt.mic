! RegT - PERQ Register Diagnostic.
! Copyright (C) Three Rivers Computer Corporation, 1981, 1982, 1983.

! 21 Aug 81  JPS  V1.1  Add copyright notice and change history.


! Following tests registers from R10 to R360 for double addressing and
! data integrity. First the program tests all the registers to retain
! the correct data and then tests them for double addressing on all 
! address bits.

        Constant(MaxR,357);
        Constant(MinR,11);
        Constant(MaxPat,12);               ! # of patterns. 
        
! Interesting Patterns. Add more if you like. If you do up date the
! constant MaxPat as #patterns 

        Constant(Pat0,0);
        Constant(Pat1,177777);
        Constant(Pat2,177400);
        Constant(Pat3,377);
        Constant(Pat4,170360);
        Constant(Pat5,007417);
        Constant(Pat6,146314);
        Constant(Pat7,031463);
        Constant(Pat8,125252);
        Constant(Pat9,52525);
        
        
        Define(Pat,4);           ! Holds current pattern being used
        Define(PatNum,1);             ! Holds current pattern number being used
        Define(Mask,2);         ! Bit on which double addr is being tested
        Define(RegAd,3);               ! Current register
        Define(ShouldBe,0);         ! Pattern that was expected from the register
        Define(Read,5);         ! Indicates if reads or writes in progress
        Define(TestY,6);               ! 0 testing X Bank, 1 Testing Y bank
        Define(R7,7);             ! Scratch
        Define(Error,370);
        Define(Xval,10);
        
! Subroutine to write the register bank. WREG(Pat,Mask)
! Pat is the pattern to be written and Mask is the address bit on which
! the double address test is being done. If the Mask bit is not set in
! the address of a register Reg := Pat   ELSE Reg := NotPat.

WReg:     RegAd := MinR;                 ! start with bottom register
        LoadS(WWtReg);           ! Set up for Set addr routine
      
WLoop:   Read := 0,Call(SetAdr); ! to set register addr in control store

! now figure out what to write into the register

               RegAd AND Mask;          ! is mask bit set??
        ShouldBe := Pat, If EQL GoTo(WWtReg);
        ShouldBe := Not Pat;
        
WWtReg: R7 := ShouldBe;         ! ****** Instruction is modded
        RegAd - MaxR;             ! done?
        RegAd := RegAd + 1, If EQL Return;
        GoTo(WLoop);
        
! Subroutine to Read the register bank. RREG(Pat,Mask,TestY)
! Much like the WReg routine. Checks for register to contain Pat
! or Not Pat depending on its address and the Mask. The test used
! depends on TestY

RReg:     RegAd := MinR,LoadS(RRdReg);    ! start with bottom register
      
RLoop:   Read := 1,Call(SetAdr); ! to set register addr in control store

! now figure out what to expect from the register

        RegAd AND Mask;         ! is mask bit set??
        ShouldBe := Pat, If EQL GoTo(RRdReg);
        ShouldBe := Not Pat;
        
 ! Time to read the register. Do things differently for X and Y banks
 ! Following instruction gets modified. If the X Bank is being tested
 ! The X field is set to RegAd and the Y field to R0.
 ! If the Y Bank is being tested Both X and Y fields are set to RegAd.
        
        
RRdReg: R7 - ShouldBe;           ! ***** Instruction is modified *****
        If EQL GoTo(RdCont);
         
        Error := 1, Call(Xtract);           ! Got an error Quit.
        Return;                 ! after saving X register
        
RdCont: RegAd - MaxR;             ! done?
        RegAd := RegAd + 1, If EQL Return;
        GoTo(RLoop);
        
! Subroutine to set address of register. SetAdr(RegAd,Loc)
! Loc is location to be changed. Routine expects this to be loaded
! into the 2910 register when it is called. If X is being tested
! X is set to RegAd and Y to 0. If Y is being tested both X and Y
! are set to RegAd.

SetAdr: RegAd := RegAd AND 377;
        R7 := RegAd;               ! Scratch Copy
        
        R7 := R7 + R7;           ! Shift X address to top byte
        R7 := R7 + R7;           ! by doing repeated adds
        R7 := R7 + R7;
        R7 := R7 + R7;
        R7 := R7 + R7;
        R7 := R7 + R7;
        R7 := R7 + R7;
        R7 := R7 + R7;
        
! X address is now in top byte of R7. Set the Y address depending on
! X or Y Bank being tested

        R7 := R7 AND 177400;       ! sets Y addr to 0
        TestY AND Read;
        If EQL GoTo(SACont);
        R7 := R7 OR RegAD;           ! Sets Y address to RegAd
        
 ! Now write the Control store.
 
SACont: Not R7;
        WCSHi,If True GoToS(SARet);
        
SARet:   Return;

! Subroutine to select the pattern to work with SelPat(PatNum). It
! is a case statement. Returns the value in PAT.
! Add to this subroutine if more patterns are added.

SelPat: R7 := PatNum;             ! Make a scratch copy

        Pat := Pat0, If EQL Return;
        
        R7 := R7 - 1;
        Pat := Pat1, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat2, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat3, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat4, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat5, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat6, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat7, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat8, If EQL Return;

        R7 := R7 - 1;
        Pat := Pat9, If EQL Return;
        
! Add to the code above if more patterns are added
        
        Pat := Pat0, Return;               ! shouldnt get here .....

! Subroutine to run the test once the main loop has set up all the 
! various parameters
        
TstLp:   PatNum := 0;
TLp:       Call(SelPat);                          ! Go select the pattern to work with
        Call(WReg);                         ! Write the registers
        Call(RReg);                         ! Read them back
        Error;                           ! see if any error
        If EQL GoTo(TstCnt);
        Error := 1,Return;
TstCnt: PatNum := PatNum + 1;
        PatNum - MaxPat;                       ! all patterns done??
        If NEQ GoTo(TLp);                     ! keep going
        0,Return;
        
! The Main Loop To drive the test. First do a pass testing the data
! integrity, a pass testing double addressing. Repeat this for both
! X and Y banks.

! Data Test X Bank

        Mask := 0, Loc(2400);             ! Mask is 0 for data test
        Error := 0;
        
        TestY := 0,Call(TstLp);         ! Go test X first
        If EQL GoTo(MTstY);
        Error := 101, GoTo(7401);             ! Error return
        
MTstY:   TestY := 1, Call(TstLp);              ! Go test Y next
        If EQL GoTo(MDATstX);
        Error := 201, GoTo(7401);             ! Error return
        
! Double address test on X register bank
        
MDATstX:Mask := 1;                           ! Start test on bit 0
MDAXLp: TestY := 0,Call(TstLp);         ! Double address test on mask bit
        If EQL GoTo(MDAXCnt);
        Error := 102, GoTo(7401);             ! Error return
        
MDAXCnt:Mask := Mask + Mask;               ! shift one bit
        Mask := Mask AND 377;
        If NEQ GoTo(MDAXLp);
        
! Double address test on Y register Bank 
        
MDATstY:Mask := 1;                           ! Start test on bit 0
MDAYLp: TestY := 1,Call(TstLp);         ! Double address test on mask bit
        If EQL GoTo(MDAYCnt);
        Error := 202, GoTo(7401);             ! Error return
        
MDAYCnt:Mask := Mask + Mask;               ! shift one bit
        Mask := Mask AND 377;
        If NEQ GoTo(MDAYLp);
        
! All Done return

        Error := 100, GoTo(7401);

! Following routine saves the value of X register when an error occurs.
! Should be called from RReg routine.
        
        
Xtract: LoadS(XSave);             ! set up X register address
               Call(SetAdr);
XSave:   Tos := R7;                  ! **** This Instruction is MODIFIED ******
        XVal:= TOS, Return;

        END;
