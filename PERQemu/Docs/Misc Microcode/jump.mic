!!!     Jump - Test Perq microcode jumps.
!       J. P. Strait           30 Oct 80.
!       Copyright (C) Three Rivers Computer Corporation, 1980, 1981, 1982, 1983.

!!      Modification history.
!
!       30 Oct 80  V1.0  JPS  Start program.

!!!     Jump tests the Perq microcode jump fields.  It tests as many jump
!       types as are practical.  Every location in the microstore except the
!       Krnl and the body of this program is filled with the following
!       instruction:
!
!            R0 := current location, Return;
!
!       Thus if the test of a certain jump is preceded by a call, we can
!       determine where the jump actually went.  Of course we must trust
!       certain jump types--Next, LoadS, Goto, Call, and Return.


!!      Words of microcode have this form:
!
!             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
!             ------------------------------- 
!       Hi:  |        X      |       Y       |
!            |-------------------------------|
!       Mid: |  Cnd  |  Jmp  |B|H| F |   SF  |
!            |-------------------------------|
!       Low: |        Z      |  A  |1|W|0|3|2|  0, 1, 2, 3 are bits of Alu
!             ------------------------------- 



        Constant(WhereHi,  000000);      ! Y=0, X=0
        Constant(WhereMid, 005200);      ! SF=0, F=0, H=0, B=1, Jmp=12, Cnd=0
        Constant(WhereLow, 000014);      ! Alu=1, W=1, A=0, Z=0

        Define(R0,0);
        Define(R370,370);
        
        Define(Error,10);                ! 0 - no error or off the deep end
                                         ! 1 - address <> actual
                                         ! 2 - returned to wrong place
                                         ! 3 - "if True" went the wrong way
                                         ! 4 - "if False" went the wrong way
                                         ! 5 - LoadS/Repeat failure
        Define(Address,11);              ! what the address should be
        Define(Actual,12);               ! what the address actually was
        Define(JumpType,13);             ! type of jump being tested
        Define(TestType,14);             ! type of test:
                                         ! 0 - if True
                                         ! 1 - if False
        Define(T,20);

        Constant(First,6000);            ! First address of Jump
        Constant(Last,6777);             ! Last address of Jump
        Constant(Fill,5777);             ! Largest address to fill
        

        Place(First,Last);


Jump:

!       Test LoadS and Repeat for selected bits.

LdS:    JumpType := 14, Loc(First);
        TestType := 0;
        Error := 5;
        LoadS(1);
        R0 := not 0;
LdS1:   R0 := R0 + 1, Repeat(LdS1);
        R0 - 1;
        Address := 1, if Neq Goto(Wrong);
        LoadS(2);
        R0 := not 0;
LdS2:   R0 := R0 + 1, Repeat(LdS2);
        R0 - 2;
        Address := 2, if Neq Goto(Wrong);
        LoadS(4);
        R0 := not 0;
LdS3:   R0 := R0 + 1, Repeat(LdS3);
        R0 - 4;
        Address := 4, if Neq Goto(Wrong);
        LoadS(10);
        R0 := not 0;
LdS4:   R0 := R0 + 1, Repeat(LdS4);
        R0 - 10;
        Address := 10, if Neq Goto(Wrong);
        LoadS(20);
        R0 := not 0;
LdS5:   R0 := R0 + 1, Repeat(LdS5);
        R0 - 20;
        Address := 20, if Neq Goto(Wrong);
        LoadS(40);
        R0 := not 0;
LdS6:   R0 := R0 + 1, Repeat(LdS6);
        R0 - 40;
        Address := 40, if Neq Goto(Wrong);
        LoadS(100);
        R0 := not 0;
LdS7:   R0 := R0 + 1, Repeat(LdS7);
        R0 - 100;
        Address := 100, if Neq Goto(Wrong);
        LoadS(200);
        R0 := not 0;
LdS8:   R0 := R0 + 1, Repeat(LdS8);
        R0 - 200;
        Address := 200, if Neq Goto(Wrong);
        LoadS(400);
        R0 := not 0;
LdS9:   R0 := R0 + 1, Repeat(LdS9);
        Address := 400;
        R0 - 400;
        if Neq Goto(Wrong);
        LoadS(1000);
        R0 := not 0;
LdS10:  R0 := R0 + 1, Repeat(LdS10);
        Address := 1000;
        R0 - 1000;
        if Neq Goto(Wrong);
        LoadS(2000);
        R0 := not 0;
LdS11:  R0 := R0 + 1, Repeat(LdS11);
        Address := 2000;
        R0 - 2000;
        if Neq Goto(Wrong);
        LoadS(4000);
        R0 := not 0;
LdS12:  R0 := R0 + 1, Repeat(LdS12);
        Address := 4000;
        R0 - 4000;
        if Neq Goto(Wrong);

!       Test LoadS and Repeat a bit more vigorously.

        JumpType := 14;
        TestType := 0;
        Address := Fill;
LdS13:  Error := 0, LoadS(LdS14);
        Call(MakeJump);
LdS14:  LoadS(0);                     ! *** this instruction is modified ***
        R0 := not 0;
LdS15:  R0 := R0 + 1, Repeat(LdS15);
        R0 - Address;
        Error := 5, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(LdS13);

!       Fill the controlstore with the special instruction.

        Address := Fill;
        LoadS(Fill);
Jump1:  T := Address;
        T := T and 377;
        T := T or WhereHi;
        not T;
        WcsHi, if True GotoS(Jump2);
Jump2:  not WhereMid;
        WcsMid, if True GotoS(Jump3);
Jump3:  T := Address;
        T := T and 177400;
        T := T or WhereLow;
        not T;
        WcsLow, if True GotoS(Jump4);
Jump4:  Address := Address - 1, Repeat(Jump5);
Jump5:  if Geq Goto(Jump1);

!       Test JumpZero.
!
!JZ:     JumpType := 0, Call(JZ1);
!        R0;
!        if Neq Goto(Wrong);
!        Goto(Cll);
!        
!JZ1:    JumpZero;

!       Test Call.

Cll:    JumpType := 1, LoadS(Cll2);
        TestType := 0;
        Address := Fill;
Cll1:   Error := 0, Call(MakeJump);
        R0 := not 0;
Cll2:   if True Call(0);              ! *** this instruction is modified ***
        Next;
        R0;
        Error := 3, if Lss Goto(Wrong);
        R0 - Address;
        Error := 1, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(Cll1);
        TestType := 1, LoadS(Cll4);
        Address := Fill;
Cll3:   Error := 0, Call(MakeJump);
        R0 := not 0;
Cll4:   if False Call(0);             ! *** this instruction is modified ***
        Next;
        R0;
        Error := 4, if Geq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(Cll3);

!       Test Goto.

Go:     JumpType := 3, LoadS(Go3);
        TestType := 0;
        Address := Fill;
Go1:    Error := 0, Call(MakeJump);
        R0 := not 0, Call(Go3);
        Next;
        R0 - Address;
        Error := 1, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(Go1);
        TestType := 1, LoadS(Go4);
        Address := Fill;
Go2:    Error := 0, Call(MakeJump);
        R0 := not 0, Call(Go4);
        Next;
        R0;
        Error := 4, if Geq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(Go2);
        Goto(Go5);
        
Go3:    if True Goto(0);              ! *** this instruction is modified ***
        R0;
        Error := 3, if Lss Goto(Wrong);
        Error := 2, Goto(Wrong);

Go4:    if False Goto(0);             ! *** this instruction is modified ***
        R0;
        Error := 4, if Geq Goto(Wrong);
        Return;                       ! get rid of return address

Go5:

!       Test CallS.

CllS:   TestType := 1;
        Address := Fill;
CllS1:  JumpType := 14, LoadS(CllS2);
        Error := 0, Call(MakeJump);
        R0 := not 0;
CllS2:  LoadS(0);                     ! *** this instruction is modified ***
        JumpType := 5;
        if False CallS(CllS5);
        Next;
        R0;
        Error := 4, if Lss Goto(Wrong);
        R0 - Address;
        Error := 1, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(CllS1);
        TestType := 0;
        Address := Fill;
CllS3:  LoadS(CllS4);
        Error := 0, Call(MakeJump);
        R0 := not 0;
        LoadS(CllS5);
CllS4:  if True CallS(0);             ! *** this instruction is modified ***
        Next;
        R0;
        Error := 3, if Lss Goto(Wrong);
        R0 - Address;
        Error := 1, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(CllS3);
        Goto(CllS6);

CllS5:  Return;                       ! here if Cnd works wrong

CllS6:

!       Test GotoS.

GoS:    TestType := 1;
        Address := Fill;
GoS1:   JumpType := 14, LoadS(GoS3);
        Error := 0, Call(MakeJump);
        JumpType := 7;
        R0 := not 0, Call(GoS3);
        Next;
        R0;
        Error := 4, if Lss Goto(Wrong);
        R0 - Address;
        Error := 1, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(GoS1);
        TestType := 0;
        Address := Fill;
GoS2:   LoadS(GoS4);
        Error := 0, Call(MakeJump);
        LoadS(GoS5);
        R0 := not 0, Call(GoS4);
        Next;
        R0;
        Error := 3, if Lss Goto(Wrong);
        R0 - Address;
        Error := 1, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(GoS2);
        Goto(GoS6);
        
GoS3:   LoadS(0);                     ! *** this instruction is modified ***
        if False GotoS(GoS5);
        R0;
        Error := 4, if Lss Goto(Wrong);
        Error := 2, Goto(Wrong);

GoS4:   if True GotoS(0);             ! *** this instruction is modified ***
        R0;
        Error := 3, if Lss Goto(Wrong);
        Error := 2, Goto(Wrong);

GoS5:   Return;                       ! here if Cnd works wrong

GoS6:

!       Test JumpPop.

JPop:   JumpType := 13, LoadS(JPop5);
        TestType := 0;
        Address := Fill;
JPop1:  Error := 0, Call(MakeJump);
        R0 := not 0, Call(JPop4);
        Next;
        R0;
        Error := 3, if Lss Goto(Wrong);
        R0 - Address;
        Error := 1, if Neq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(JPop1);
        TestType := 1, LoadS(JPop7);
        Address := Fill;
JPop3:  Error := 0, Call(MakeJump);
        R0 := not 0, Call(JPop6);
        Next;
        R0;
        Error := 4, if Geq Goto(Wrong);
        Address := Address - 1;
        if Geq Goto(JPop3);
        Goto(JPop8);

JPop4:  Call(JPop5);                  ! make level to pop from call stack
        Error := 2, Goto(Wrong);

JPop5:  if True JumpPop(0);           ! *** this instruction is modified ***
        R0;
        Error := 3, if Lss Goto(Wrong);
        Error := 2, Goto(Wrong);

JPop6:  Call(JPop7);                  ! make level to pop from call stack
        R0;
        Error := 4, if Geq Goto(Wrong);
        Return;                       ! get rid of first return address

JPop7:  if False JumpPop(0);          ! *** this instruction is modified ***
        R0;
        Error := 4, if Geq Goto(Wrong);
        Return;                       ! get rid of second return address

JPop8:

!       That's all for now.

        R370 := 100, Goto(7401);


!!      Here on error.

Wrong:  Actual := R0;
        R370 := 101, Goto(7401);


!!      MakeJump - Make a jump instruction.

MakeJump: not 0;
        WcsHi, if True GotoS(MJ1);
MJ1:    not Address, Field(10,4);
        T := Shift or 60;             ! F=3, SF=not (Address div 400)
        JumpType, LeftShift(10);
        T := Shift or T;              ! Jmp=JumpType
        TestType, LeftShift(14);
        T := Shift or T;              ! Cnd=TestType
        not T;
        WcsMid, if True GotoS(MJ2);
MJ2:    not Address, LeftShift(10);
        not Shift;                    ! Z=not (Address mod 400)
        WcsLow, if True GotoS(MJ3);
MJ3:    Return;


        end;
!!      Words of microcode have this form:
!
!       Hi:  |-------------------------------|
!            |        X      |        Y      |
!            |-------------------------------|
!
!       Mid: |-------------------------------|
!            |  Cnd  |  Jmp  |B|H| F |   SF  |
!            |-------------------------------|
!
!       Low: |-------------------------------|
!            |        Z      |  A  |1|W|0|3|2|  0, 1, 2, 3 are bits of Alu
!            |-------------------------------|
