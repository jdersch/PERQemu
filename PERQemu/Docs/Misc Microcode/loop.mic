!
! Loop - A micro-code program to perform some simple functions
!        over and over and over and over.
!
! Don Scelza  30-Oct-80
! Copyright (C) 1980, 1981, 1982, 1983 Three Rivers Computer Corperation
!
! 0.0  30-Oct-80  Created Loop
!
!
!
! MemR1    (0)  Single word read.
! MemR2    (10) Read double words.
! MemR4    (20) Read quad words.
! MemR4R   (30) Read quad words reverse.
! 
! MemW1    (100) Write single words.
! MemW2    (110) Write double words.
! MemW4    (120) Write quad words.
! MemW4R   (130) Write quad words reverse.
!
! Stack1   (200) Write the top of the stack.
! Stack2   (210) Read the top of the stack.
!
! IOBRead  (300) Read the IOB.
! IOBWrite (310) Write the IOB.




define(AddReg,100);                    ! Register to hold addresses.
define(ValReg,101);                    ! Register to hold values.
define(ValReg2,102);                   ! Another register to hold values.
define(ValReg3,103);                   ! Yet another.
define(ValReg4,104);                   ! And a forth.



! Memory read tests.  Single word.
!
! Address that is to be read is in AddReg (0).
! The value that is read will be placed into ValReg (1).

MemR1: MA := AddReg, Fetch,  Loc(0);
       ValReg := MDI, GoTo(MemR1);
       
       

! Memory read tests.  Double word.
!
! Address that is to be read is in AddReg (0).
! The value in this register must be double word aligned.
! The two values that are read will be put into ValReg and
! ValReg2.

MemR2:  MA := AddReg, Fetch2, Loc(10);
        ValReg := MDI;
        ValReg2 := MDI,  GoTo(MemR2);
       
       

! Memory read tests.  Quad word.
!
! Address that is to be read is in AddReg (0).
! The value in this register must be quad word aligned.
! The four values that are read will be put into ValReg,
! ValReg2, ValReg3 and ValReg4.

MemR4:  MA := AddReg, Fetch4, Loc(20);
        ValReg := MDI;
        ValReg2 := MDI;
        ValReg3 := MDI;
        ValReg4 := MDI,  GoTo(MemR4);
       
       

! Memory read tests.  Quad word reverse.
!
! Address that is to be read is in AddReg (0).
! The value in this register must be quad word aligned.
! The four values that are read will be put into ValReg,
! ValReg2, ValReg3 and ValReg4.

MemR4R: MA := AddReg, Fetch4R, Loc(30);
        ValReg := MDI;
        ValReg2 := MDI;
        ValReg3 := MDI;
        ValReg4 := MDI,  GoTo(MemR4R);
        
        

! Memory write tests.  Single words.
!
! Address that is to be written is in AddReg (0).
! The value that is to be written is in ValReg (1).

MemW1:  MA := AddReg, Store, Loc(100);
        MDO := ValReg, GoTo(MemW1);
        
        

! Memory write tests.  Double words.
!
! Address that is to be written is in AddReg (0).
! The values that are to be written are in ValReg (1) and
! ValReg2 (2).

MemW2:  MA := AddReg, Store2, Loc(110);
        MDO := ValReg;
        MDO := ValReg2, GoTo(MemW1);
        
        

! Memory write tests.  Quad words.
!
! Address that is to be written is in AddReg (0).
! The values that are to be written are in ValReg (1),
! ValReg2 (2), ValReg3 (3) and ValReg4 (4).

MemW4:  MA := AddReg, Store4, Loc(120);
        MDO := ValReg;
        MDO := ValReg2;
        MDO := ValReg3;
        MDO := ValReg4, GoTo(MemW4);        
        

! Memory write tests.  Quad words reverse.
!
! Address that is to be written is in AddReg (0).
! The values that are to be written are in ValReg (1),
! ValReg2 (2), ValReg3 (3) and ValReg4 (4).

MemW4R: MA := AddReg, Store4R, Loc(130);
        MDO := ValReg;
        MDO := ValReg2;
        MDO := ValReg3;
        MDO := ValReg4, GoTo(MemW4R);
        
        
        
! TOS write test.
!
! TOS will be written with the value in ValReg (1).

Stack1: TOS := ValReg, GoTo(Stack1), Loc(200);
        
        
        
! TOS read test.
!
! The value read from TOS will be written into ValReg (1).

Stack2: ValReg := TOS, GoTo(Stack2), Loc(210);



! IOB Read test.
!
! To read an IO device change the "Z" field of the microinstruction
! at location 300 to contain the device address.
! The value that is read will be in ValReg.

IOBRead:IOB(0), Loc(300);
        ValReg := IOD, GoTo(IOBRead); 
        



! IOB Write test.
!
! To write an IO device change the "Z" field of the microinstruction
! at location 300 to contain the device address.
! The value that will be written is in ValReg.

IOBWrite: ValReg, IOB(0), Loc(310);
          GoTo(IOBWrite);
        
        
end;
