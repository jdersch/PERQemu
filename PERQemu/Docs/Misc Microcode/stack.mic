!!!     Stack - Stack test microcode.
!       J. P. Strait       29 Oct 80.
!       Copyright (C) Three Rivers Computer Corporation, 1980, 1981, 1982, 1983.

!!      Modification history.
!
!       29 Oct 80  V1.0  JPS  Start program.

!!!     Stack tests the Perq expression stack by moving ones and zeros
!       through every level of the stack.  Thus it tests every bit position
!       in every level of the stack.  As an added bonus, it does a dual
!       address test of the stack.
!
!       To run Stack, load it with OdtPrq and type 'G'.  Stack will return
!       to the Krnl with one of these breakpoints.
!
!            100 - no errors detected.
!            101 - error detected in moving ones.
!            102 - error detected in moving zeros.
!
!       If an error is detected, you can examine the registers that give
!       the Depth (R10), what should be in the stack (R11, Word), and what
!       actually was found in the stack (R12, Stack).  If you want to
!       continue testing after an error, you may type '101P' after a
!       breakpoint 101 or '102P' after a breakpoint 102.


        Define(Depth,10);
        Define(Word,11);
        Define(Stack,12);
        Define(Test,13);
        Define(BreakReg,370);
        
        Constant(BreakAddr,7401);
        
        
Start:  Word := 1, Loc(2400);
        BreakReg := 101;
One:    Depth := 0;
One1:   Tos := Word, Push, Call(RotL), Loc(10);
        Depth := Depth + 1;
        Depth xor 20;
        if Neq goto(One1);
One2:   Call(RotR);
        Stack := Tos, Pop, Loc(20);
        Test := Stack;
        Test := Test xor Word;
        Test - 1;
        Depth := Depth - 1, if C19 goto(One3);
        BreakReg := 101, goto(BreakAddr);
        Nop, Loc(101);
One3:   Depth;
        if Neq goto(One2);
Zero:   Depth := 0;
Zero1:  Tos := not Word, Push, Call(RotL);
        Depth := Depth + 1;
        Depth xor 20;
        if Neq goto(Zero1);
Zero2:  Call(RotR);
        Stack := Tos, Pop;
        Test := Stack;
        Test := Test xnor Word;
        Test - 1;
        Depth := Depth - 1, if C19 goto(Zero3);
        BreakReg := 102, goto(BreakAddr);
        Nop, Loc(102);
Zero3:  Depth;
        if Neq goto(Zero2);
        Call(RotL);
        Word xor 1;
        if Neq goto(One);
        BreakReg := 100, goto(BreakAddr);

RotL:   Word := Word + Word;
        if C19 Return;
        Word := 1, Return;

RotR:   LoadS(22);
RotR1:  Call(RotL);
        Repeat(RotR1);
        Return;


        end;

