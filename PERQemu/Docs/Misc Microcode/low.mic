!!!     Low - Test Low bank of Perq microstore.
!!!     High - Test high bank of Perq microstore.
!       J. P. Strait           1 Nov 80.
!       Copyright (C) Three Rivers Computer Corporation, 1980, 1981, 1982, 1983.

!!      Modification history.
!
!       1 Nov 80  V1.0  JPS  Start program.

!!!     Low and High each test one bank of the Perq microstore.  They
!       test by writing interesting instructions into each word of the
!       microstore and executing them to see what happened.  All
!       other locations are filled with
!
!             Goto(Self);
!
!       If there are bad bits, Low gives a breakpoint, loops at some
!       address (a wrong one) in the bank being tested, or goes
!       off the deep end.
!

!!      Words of microcode have this form:
!             
!             5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
!             ------------------------------- 
!       Hi:  |        X      |       Y       |
!            |-------------------------------|
!       Mid: |  Cnd  |  Jmp  |B|H| F |   SF  |
!            |-------------------------------|
!       Low: |        Z      |  A  |1|W|0|3|2|  0, 1, 2, 3 are bits of Alu
!             ------------------------------- 

!!      Configuration constants for Low.                              ! Low
                                                                      ! Low
        Constant(ProgFirst,4000);     ! first location of code        ! Low
        Constant(ProgLast,6777);      ! last location of code         ! Low
        Constant(Entry,6000);         ! entry address                 ! Low
        Constant(Error,6700);         ! location to jump to on error  ! Low
        Constant(Resume,4101);        ! address for "P" after error   ! Low
                                                                      ! Low
        Constant(TestFirst,0000);     ! first location to test        ! Low
        Constant(TestLast,3777);      ! last location to test         ! Low
        Constant(NxtI,4000);          ! location of NextInst table    ! Low
        Constant(Go,5000);            ! target of Goto                ! Low

!!      Configuration constants for High.                             ! High
!                                                                     ! High
!       Constant(ProgFirst,0000);     ! first location of code        ! High
!       Constant(ProgLast,2777);      ! last location of code         ! High
!       Constant(Entry,2000);         ! entry address                 ! High
!       Constant(Error,2700);         ! location to jump to on error  ! High
!       Constant(Resume,0101);        ! address for "P" after error   ! High
!                                                                     ! High
!       Constant(TestFirst,4000);     ! first location to test        ! High
!       Constant(TestLast,7377);      ! last location to test         ! High
!       Constant(NxtI,0000);          ! location of NextInst table    ! High
!       Constant(Go,1000);            ! target of Goto                ! High

!!      The interesting instructions are:
!
!       1)   R377 := Tos xor 177777, ReviveVictim;
!            a) initialize Tos and R377 to 177777
!            b) initialize BPC to 10
!            c) make a Victim
!            d) distinguish ReviveVictim from NextInst
!            e) check R377=0

        Constant(Hi1,  177777);  ! X=377, Y=377
        Constant(Mid1, 001300);  ! Cnd=0, Jmp=2, B=1, H=1, F=0, SF=0
        Constant(Low1, 177772);  ! Z=377, A=7, Alu=12, W=1
        
!       2)   NextInst(NxtI);
!            a) initialize the Op file empty
!            b) make a Victim
!            c) distinguish ReviveVictim from NextInst

        Constant(Hi2,  000000);  ! X=0, X=0
        Constant(Mid2, 001000);  ! Cnd=0, Jmp=2, B=0, H=0, F=0, SF=0
        Constant(Low2, 077400);  ! Z=177, A=0, Alu=0, W=0             ! Low
!       Constant(Low2, 177400);  ! Z=377, A=0, Alu=0, W=0             ! High
        
!       3)   if true Return;
!            a) call this one and make sure it returns
!            b) call it after: BPC := 0;
!                              R1 := 1;
!                              R1 - 1;   (C19, Neq, Lss, Gtr, OverFlow, Odd,
!                                         Bpc[3], ByteSign, False)
!            c) call it after: 1;        (Eql, Leq, Carry)
!            d) call it after: not 0;    (Geq)

        Constant(Hi3,  000000);  ! X=0, Y=0
        Constant(Mid3, 005000);  ! Cnd=0, Jmp=12, B=0, H=0, F=0, SF=0
        Constant(Low3, 000000);  ! Z=0, A=0, Alu=0, W=0

!       4)   Shift and not R0, Pop, Return;
!            a) set shift-control to Rotate(0)
!            b) set R0 to 0
!            c) put two things in the stack
!            d) put 177777 thru the shifter before calling this one
!            e) read 177777 on the shifter
!            d) be sure R0 doesn't change
!            f) be sure that have the lower one on top

        Constant(Hi4,  000000);  ! X=0, Y=0
        Constant(Mid4, 005005);  ! Cnd=0, Jmp=12, B=0, H=0, F=0, SF=5
        Constant(Low4, 000005);  ! Z=0, A=0, Alu=5, W=0

!       5)   if Geq, Goto(Go);
!            a) execute after: BPC := 0;
!                              R1 := 1;
!                              R1 - 1;   (C19, Neq, Lss, Gtr, OverFlow, Odd,
!                                         Bpc[3], ByteSign, False)
!            b) execute after: 1;        (Eql, Leq, Carry)

        Constant(Hi5,  000000);  ! X=0, Y=0
        Constant(Mid5, 171465);  ! Cnd=17, Jmp=3, B=0, H=0, F=3, SF=5 ! Low
!       Constant(Mid5, 171475);  ! Cnd=17, Jmp=3, B=0, H=0, F=3, SF=15! High
        Constant(Low5, 177400);  ! Z=377, A=0, Alu=0, W=0
        
!       6)   LoadOp, if False Loop;
!            a) get known stuff in the Op file
!            b) do a Fetch4 on other known stuff
!            c) call it and check the Op file
!            d) do a return and verify that we went back to the right place

        Constant(Hi6,  000000);  ! X=0, Y=0
        Constant(Mid6, 016412);  ! Cnd=0, Jmp=15, B=0, H=0, F=0, SF=12
        Constant(Low6, 000000);  ! Z=0, A=0, Alu=0, W=0
        

!!      Constants for Goto(Self);

        Constant(HiG,  000000);       ! X=0, Y=0
        Constant(MidG, 001460);       ! Cnd=0, Jmp=3, B=0, H=0, F=3, SF=0
        Constant(LowG, 000000);       ! Z=0, A=0, Alu=0, W=0
        
        
        Define(R0,0);
        Define(R1,1);
        Define(R377,377);
        Define(R370,370);
        
        Define(Address,10);
        Define(Test,11);
        Define(Hi,12);
        Define(Mid,13);
        Define(Low,14);
        Define(MakeVictim,15);
        Define(NextInstDesired,16);
        Define(State,17);
        Define(T,20);
        Define(Save377,177);
        
        
        Place(ProgFirst, ProgLast);



Loc(Entry), LoadS(TestLast);
        Address := TestLast;
Starta: Call(Self);                  ! fill memory with Goto(Self)
        Address xor TestFirst;
        if Eql Goto(Startb);
        Address := Address - 1, Repeat(Starta);
Startb: Address := TestLast;
        LoadS(TestLast);

Top:    if True Loop;                ! clear the call stack
        if True Loop;                ! "if True" required by placer bug
        if True Loop;
        if True Loop;
        if True Loop;
        StackReset;                  ! clear the expression stack
        
!       Test 1.

        Test := 1;
        Hi := Hi1;
        Mid := Mid1;
        Low := Low1;
        NextInstDesired := 0;
        Call(Write);                 ! write the instruction
        R377 := 177777;
        Tos := R377;
        Bpc := 10;
        MakeVictim := 1;
        NextOp, if Bpc[3] Goto(T1a); ! cancel "if Bpc[3] Goto(Refill)"
T1a:    MakeVictim;
        MakeVictim := 0, if Eql Goto(T1b); ! if returning from ReviveVictim
        GotoS;      ! execute the instruction
T1b:    R377;
        if Neq Goto(Wrong);
        

!       Test 2.

        Test := 2;
        Hi := Hi2;
        Mid := Mid2;
        Low := Low2;
        NextInstDesired := 1;
        Call(Write);                 ! write the instruction
        Bpc := 10;
        MakeVictim := 1;
        NextOp, if Bpc[3] Goto(T2a); ! cancel "if Bpc[3] Goto(Refill)"
T2a:    MakeVictim;
        MakeVictim := 0, if Eql Goto(Wrong); ! if returning from ReviveVictim
        CallS;                       ! execute the instruction
        NextInstDesired := 0;

!       Test 3.

        Test := 3;
        Hi := Hi3;
        Mid := Mid3;
        Low := Low3;
        Call(Write);                 ! write the instruction
        BPC := 0;
        R1 := 1;
        R1 - 1, CallS;               ! execute the instruction
        1, CallS;                    ! execute it again
        not 0, CallS;                ! one last time

!       Test 4.

        Test := 4;
        Hi := Hi4;
        Mid := Mid4;
        Low := Low4;
        Call(Write);                 ! write the instruction
        R0 := 0, Rotate(0);
        R1 := 12345;
        Tos := R1;
        R1 := 54321;
        Tos := R1, Push;
        R1 := 12345;
        177777, CallS;               ! execute the instruction
        not Shift;
        R0, if Neq Goto(Wrong);
        Tos xor R1, if Neq Goto(Wrong);
        if Neq Goto(Wrong);

!       Test 5.

        Test := 5;
        Hi := Hi5;
        Mid := Mid5;
        Low := Low5;
        Call(Write);                 ! write the instruction
        Bpc := 0;
        R1 := 1;
        R1 - 1, CallS;               ! execute the instruction
        1, CallS;                    ! execute it again

!       Test 6.

        Test := 6;
        Hi := Hi6;
        Mid := Mid6;
        Low := Low6;
        0, Store4;
        0;
        0;
        0;
        0;
        4, Store4;
        177777;
        177777;
        177777;
        177777;
        Call(Write);                 ! write the instruction
        4, Fetch4;
        nop;
        LoadOp;
        nop;
        nop;
        nop;
        State := 2;
        0, Fetch4;
        CallS;                       ! execute the instruction
        State := State - 1;
        if Gtr Return;               ! if first time
        Bpc := 0;
        NextOp;
        if Neq Goto(Wrong);

!       Advance to next address.

Loc(Resume), Call(Self);                  ! erase location under test
        Address xor TestFirst;
        if Eql Goto(Done);
        Address := Address - 1, Repeat(Top);

!       All done.

Done:   R370 := 100, Goto(7401);



!!      Subroutines.




!!      Here if "NextInst(4000)".

Loc(NxtI), NextInstDesired;
        if Neq Return;               ! if we wanted a NextInst
        Goto(Wrong);
        

!!      Here if "Goto(5000)".

Loc(Go), Return;                     ! if we wanted a Goto(5000)
        
        
!!      Here if "if Bpc[3] Goto(Refill)".

Refill: Goto(Refill);


!!      Write "Goto(Address)" at Address=S.

Self:   not HiG;
        WcsHi, if True GotoS(Selfa);
Selfa:  not Address, Field(10,4);
        T := Shift or MidG;
        not T;
        WcsMid, if True GotoS(Selfb);
Selfb:  not Address, LeftShift(10);
        T := Shift or LowG;
        not T;
        WcsLow, if True GotoS(Selfc);
Selfc:  Return;


!!      Write Hi, Mid, Low at Address=S.

Write:  not Hi;
        not Mid, WcsHi, if True GotoS(Writea);
Writea: not Low, WcsMid, if True GotoS(Writeb);
Writeb: WcsLow, if True GotoS(Writec);
Writec: Return;


!!      Here if something went wrong.

Wrong:  Save377 := R377, Loc(Error);
        R370 := Resume;
        Goto(7401);


        end;
