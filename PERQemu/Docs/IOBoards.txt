
PERQ I/O Board Implemetation Notes
==================================

Every PERQ has a 5-slot backplane, which requires at minimum a CPU board,
a memory board, and an IO board.  The two extra slots, labeled CPU Option
and IO Option, can be fitted with several different boards.  This file
describes which of these options are supported by PERQemu.


Confusion
---------

The PERQ-1 I/O Board is typically referred to as "IOB".  In practice this
means it contains a Z80 subsystem with one RS-232 port, GPIB, audio output
channel, DMA hardware, and controllers for the Shugart floppy and hard disk
drives.  The IOB Z80 runs at ~2.5Mhz and typically runs firmware version
v8.7 (which is what simulated Z80 in the earlier versions of PERQemu was
designed to mimic).  This version of the firmware is known as the "old Z80"
protocol.

The PERQ-2 series contains an updated board called the "EIO", or "Ethernet
IO" board.  It features a faster Z80 @ 4Mhz, an additional RS-232 port, an
RTC chip, and a newer disk interface that supports 8" Micropolis or 5.25"
ST-506/MFM type drives.  An "NIO" version of the board, called the "non-
Ethernet IO" board, was allegedly available, but whether this lower cost
option was actually shipped is unclear.  I've never even seen one, but they
are mentioned in various places including "PERQ_Chart.jpg" (included in the
Docs directory).  The latest/most common version of the Z80 firmware is
v10.017 (or thereabouts), which is known as the "new Z80".

There is some confusion about what the "CIO" board is.  With later versions
of POS, PNX and Accent, the "old Z80" protocols were dropped as the "new Z80"
code is supposed to be faster, better maintained, and supports all of the
new EIO/NIO features.  In order to not leave the installed base of PERQ-1s
behind, firmware updates were made available so that the original IOBs could
run the v10.x code, thus the old IOB with new firmware was called "current",
or "CIO".  That's the theory, anyway.  Microcode sources exist that imply
that there was at least one subtle hardware and microcode change that would
allow the "CIO" board to support the 8" Micropolis hard disks.  Was this
true only during the transition from the PERQ-1 to the first rare/odd duck
that was the PERQ-2 (sometimes known as the "K1"?)?  Accent, at least, makes
it clear that their microcode supported (for a while) _both_ the "oio" and
"cio" Z80 versions on the PERQ-1, although by S5 (?) or S6 the old protocol
was dropped.

Options!
--------

There are no known dedicated CPU Option boards in the wild.  Rumors and even
press clippings report that a "cache/pager board" was supposedly being readied
but there's no evidence that it ever shipped -- no schematics, notes, or code
has been found to show it was ever completed, and only a few undocumented
signal lines on the backplane hint at what it might have contained.  The only
boards known to work in the CPU Option slot are the "link board", used for
microcode debugging, and the "universal streamer board," a wire-wrapped QIC
tape drive interface.

There are quite a few interesting IO Option boards, but most of them are
extremely rare.  PERQ was one of the early adopters of Ethernet, and many
early PERQ-1s at Carnegie-Mellon University had wire-wrapped 3Mbit "prototype
Ethernet" boards.  At least one physical example of this board still exists,
and there is software support for it.  Adding emulation support to PERQemu
for 3Mbit Ethernet would be _especially_ fun if it could then talk to an
emulated Xerox Alto (see: Josh Dersch's amazing "Contralto" project).

The PERQ Audre scanner board is a full-slot IO Option that provides a large
memory buffer and hookup to a CCD camera mounted to a light rack and used for
scanning and image processing.  These are super cool and would be really fun
to mess with - we even have some code to drive one.  But it's likely there
are no more real ones out there in the world anymore.  Which _sucks_.

Three Rivers did produce a "Multibus/Laser Option" board, of which a few
surviving examples still exist.  There is software support avaialble as
well.  While documentation has turned up that shows development on this
started much earlier than previously believed, and that initial development
had been done on a PERQ-1, all of the surviving microcode seems to require
the EIO board's DMA for data transfer.  So if/when we are able to add the
"MLO" board, it'll be restricted to the PERQ-2/EIO configurations.  This
board supports either one controller board plugged in directly (somehow? in
a manner similar to the Sun VME<->Multibus adapter board?) OR it is cabled
to an external card cage.  Microcode and Pascal support for driving either an
SMD disk controller or a 9-track tape drive exists, but I've never been able
to track down any information about the specific Multibus cards that this
software talkes to.  The idea of hanging a string of CDC 9766 300MB drives
off a PERQ is enticing.  Anyone have a clue?  Anyone?  Bueller?

By far the most common IO option is Three Rivers' "OIO" board.  The basic
"Option IO" Board comes in many flavors: it may contain the "link" option,
a 10Mbit Ethernet controller, a QIC streamer controller, and the same Canon
laser printer  interface as included with the MLO in any combination.  The
"link" option (a DEC DRV-11 style -- possibly compatible? -- 16-bit parallel
interface) is also used to connect the Metheus color graphics subsystem.  The
"EthCan" board can be used to turn the PERQ-1 into a network print server,
allowing users to send screen dumps or documents across the Ethernet to a
dedicated PERQ for output on the Canon LBP-10 (or later) LBP-CX printers.
The fully-loaded "EthCanTape" adds tape backup through an Archive Sidewinder
30MB cartridge tape drive.

While the Link and QIC Tape can be fitted in the CPU Option slot, for
emulation purposes we'll just lump them all onto one virtual board.  There
is some limited support for the Link board in PERQemu; Ethernet and Canon
printing are the most interesting options to add next.  The Streamer option
shouldn't be too hard to tackle as its interface seems to be fairly simple.
Note that because the EIO board has a similar-but-not-quite-identical built-
in Ethernet as the controller on the OIO, there appear to be hardware port and
DMA channel conflicts that prevent dual-homed PERQs (although it may have been
possible to put a 3Mbit board in an EIO-equipped PERQ-2 to build a 3-to-10 
bridge node?).  PERQemu won't let you configure two Ethernets, though.


What PERQemu Supports (or will, I hope)
---------------------------------------

The "real Z80" project that Josh Dersch has undertaken will allow us to
faithfully emulate all of the PERQ models and any version of the firmware
we can lay our hands upon.  One "feature" that necessitated the change from
a simulation of the protocol to an actual Z80 emulator running the real
firmware is that the "new Z80" protocol and EIO hardware allows for Z80
code to be loaded into its private RAM at boot time, patching or extending
the ROM functionality.  This makes it impossible to "fake it" if the PERQ 2
models are to be supported.  So now the IO board instantiates a Z80 and
feeds it an actual ROM dump based on the selected configuration.

IOBoard.cs provides a base class from which all of the IO boards can be
derived.  From the hardware standpoint, the basic functionality (connection
to the IO bus on the backplane) is the same; only the particulars of the Z80
and the type of hard disk interface are different:

    IOB.cs  - for the PERQ-1 only, configures the "old Z80" and
              standard list of PERQ-1 peripherals; Shugart hard disk only
    CIO.cs  - for the PERQ-1, same as the IOB but loads the "new Z80"
              so you can run the latest OS versions
    CIO.cs  - maybe for the PERQ-2 (first model, the rare "ugly duckling"
              before the ICL cabinets introduced in the T1) we'll use
              CIO to indicate Micropolis support?  And no Ethernet?
    EIO.cs  - for the PERQ-2/T1, T2, and the 24-bit T4, this will be the
              faster 4Mhz Z80, "new" firmware, and the standard PERQ-2
              peripherals with 5.25" disk support.  We won't differentiate
              between the 24-bit EIO and the 20-bit one.  We _could_ allow
              both 8" Microp OR 5.25" MFM drives? (The schematics indicate
              that the EIO could even support the Shugart SA4000 still, by
              changing jumper settings; I am skeptical)
    NIO.cs  - wherever the EIO can go, the NIO is there without the network
              interface.  Until we actually write the emulation of the
              Ethernet and hook it up to an interface on the host, all of
              the EIOs are essentially NIOs. :-)

IOBoard.cs will have the smarts to run the Z80System on its own thread.
That's really the only feature that separates it from the Option IO boards;
we may just cheat and define the OptionIO boards as IOBoards where Z80System
is null.

The Ethernet driver will likely be split in half:  the PERQ emulation of its
fully-custom TTL implementation and homegrown microcode interface will run
on the CPU thread, while the actual host-side packet handling will run on a
background thread as it does in Contralto/Darkstar?  Seriously, who even
_has_ a single core machine these days?  An unused CPU cycle is a wasted
CPU cycle!!

This is a whole lot of typing that nobody else will read or care about...

---
Last update: skeezics    Tue Nov  2 02:33:29 PDT 2021

