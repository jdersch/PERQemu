PERQemu User Guide (rough notes)

2/17/2022 - skeezicsb - v0.5.0 (experimental)

----

All of this culled from the Readme.  Fashion it into something coherent and
decide on a format to use to produce a nicely formatted document.  It would be
extra kewl to do it on the PERQ in Prose or Mint or Scribe. :-)

Or just bash it out in Google Docs and make it publicly readable or upload a
PDF?  Sigh.

----


To load a disk image, type "load harddisk" or "load floppy" followed by a
pathname to the image file.  Use the pathname syntax appropriate for your
platform.  (You can boot from a POS "boot floppy" but as on the real hardware,
floppy boots are slow!)  PERQemu will report "Loaded." if the disk image file
is read in successfully.

The PERQ could boot from several sources, or use different boots from one
hard disk image.  Lower case letters select a normal hard disk boot; upper
case letters select the floppy.  You can boot the "old fashioned way" by
waiting for the VFY patterns to appear and hitting the appropriate key, or
tell PERQemu to do it for you by typing "set bootchar <c>" where <c> is the
boot you wish to select.  The default boot letter is 'a'.

Hit "g" or type "go" and hit enter and the emulation will be off and running!
A large display window will appear, and soon you should see a strange set of
comb-like patterns displayed as the microcode runs through its memory tests
and other diagnostics.

Note that the PERQ display is a fixed 768 x 1024 in a portrait orientation
and PERQemu does not decorate the window with scroll bars or support any
full-screen modes.  The mouse wheel or the PgUp/PgDn keys may be used to jump
the PERQ display up or down if it doesn't fit your display.

2.1 Booting and the DDS
-----------------------

The debugger console window's title will read "DDS" followed by a three-digit
number:  this is the PERQ's "diagnostic display," where the progress of the
boot sequence may be monitored.  Note that the DDS is specific to the operating
system being booted!  When the boot is complete, the DDS will typically show:

    PNX:    255
    POS:    999
    Accent: 400 (1MB of memory) or 450 (2MB)

The PERQ does its best to fool you into thinking it's broken, showing wierd
noise or patterns on the screen until it finally enables the video interrupt
and the OS takes over the display.  Because we don't emulate the 2-3 minute
"warm-up" time that the old Shugart hard drives required, most hard disk boots
will complete in just a few seconds.  If your PERQ really is stuck, consult
the "Fault Dictionary" in the Bitsavers on-line documentation repository (see
below) or in the PERQemu source Docs directory on GitHub.


2.2 POS
-------

Once POS has booted, enter the date and login with user "guest" and a blank
password (or alternately just hit "enter" at the login prompt.)  You'll need
to put focus on the display window (click on it) so that the keyboard input
goes to the PERQ and not the debugger.

The mouse works approximately as you'd expect with one minor difference, due
to functional differences between a digitizer tablet and a mouse.  Specifically:
a digitizer knows when the puck is off the tablet, where a mouse does not.
Normally this is not an issue, but if you need to simulate the "off the tablet"
behavior, hold down the "Alt" key (Command key on the Mac).

Full POS documentation can be found on Bitsavers at

    http://www.bitsavers.org/pdf/perq/PERQ_SysSWRefManual_Feb1982.pdf
    
(also in sys:user>doc> in the F.1 hard disk image, or :boot>docs> in F.15)
    
Interaction with POS is through the command-line interpreter called the
Shell.  Here are some basic commands to get you started:

    ? - list the commands defined in your "login profile"

    HELP - shows usage for various commands

    DIR - show contents of the current directory.  Executable files are
        suffixed with ".RUN" and directories are suffixed with ".DR".

    PATH (or CD) - change directory.  More or less like your Unix or DOS
        equivalent.  Note that the directory delimiter is ">" (this may
        freak out Unix heads! :-)
        CD foo>bar>baz> - change to directory foo>bar>baz
        CD ..           - change to parent directory
        CD sys:user>    - change to root of user partition

    TYPE - display a file on the screen, similar to "more" on modern OSes.
            
    COMPILE - run the Pascal compiler.  Produces a .SEG file which must be
        linked.

    LINK - runs the linker.  Produces a ".RUN" file which may be executed.

    COPY - copies a file from one location to another.  RSX: is a special
        file which can be used to transfer files to/from the emulator host
        machine.  See section 3.0 for more details.

    EDITOR - a fairly simple text editor (see also PEPPER, a more Emacs-like
        editor, available in most of the POS images)

Executable files end with ".RUN", just type the name (minus .RUN) to start
them.  Switches are prefaced by '/' as in most OSes of the day.  Commands
and switches are not generally case-sensitive, and can usually be abbreviated
as long as they are not ambiguous.  Most commands in POS will prompt you for
arguments if you don't provide them, and most commands won't do anything
harmful without asking you first.

In general, "Ctrl+c" twice will abort a running program, unless it's hung.

Note that control characters on the PERQ are actually case-sensitive!  A single
Ctrl-c is an interrupt; a second Ctrl-c signals an abort.  A Ctrl-Shift-C is
used to break out of command files and return you to the Shell.  The Pepper
editor makes extensive use of shifted control characters to make up for the
lack of a "meta" key that Emacs requires.  Quirky, no?

There are games under sys:user>games>, demos under sys:user>demo>, various 
utilities and OS source are under sys:boot>.  There are user directories 
(from the original users of this machine at Siemens!) under sys:>user> in the 
D.6 image that contain some interesting utilities.  Things are arranged a
little bit differently in POS F.15; "type welcome.txt" to learn more when you
first log in.

You can log out of POS by typing "bye" to the Shell.  To log out and power
down, type "bye off" or "bye /off" and POS will tidy up and power off the
machine.  In the case of PERQemu, that means returning you to the debugger.
Note that after the emulated PERQ powers itself off you must type "reset" to
reboot it.

REMEMBER:  PERQemu does not save modifications to the hard or floppy disks
automatically; if you accidentally blow up the disk image, just exit and
restart or reload the image - no harm done!  If you DO want to save your
changes, type "save harddisk <filename>" or "save floppy <filename>" before
you exit.


2.3 Accent
----------

In the included D.6 disk image, an early release of the Accent OS from CMU
is available too.  Accent is the forerunner of Mach, the kernel which was
the basis for NeXTstep, which became MacOS X.  This version, S4, is an
amazing and rare find, as it pre-dates the official S5 and S6 releases from
Three Rivers/PERQ Systems in late 1984-early 1985.

To boot Accent, either type "set bootchar z" or wait for the DDS to read 151
and hit the z key.  Accent's startup sequence is different, and this early
version of Accent isn't nearly as fast as POS; after prompting you to enter
the date and time, starting the servers, starting up the window manager and
running through all the initial command files takes a bit longer.  But once
things are initialized, Accent's shell behaves very much like the POS Shell,
with most of the same commands -- and a few exceptions:

    - windows act more like folks today expect them to, though it's a bit
      clumsy manipulating them at first
    - you have to click to select a "listener" window to direct where your
      typing will go -- the listener window has a grey border around it
    - you can use the basic Emacs-like control keys to retrieve previously
      typed commands and edit them (^p/^n for previous/next, ^f/^b forward/
      back, etc)
    - you can scroll back to see text that scrolled off the screen (^V/^v
      for backward/forward by roughly a page full of text)
    - interrupting or aborting the current program goes through the window
      manager, so ^c or ^C doesn't work as in POS

SAPPHIRE, the window manager, has a bunch of commands and some on-line help.
All window manager commands are prefixed by Ctrl-Del, then a letter.  Until
you're familiar with it, Ctrl-Del h for help brings up a command summary.
There are also pop-up menus, and the icons change depending on what SAPPHIRE
wants you to do (make a window, move a window, etc).  To interrupt a program
in Accent, use Ctrl-Del c, or Ctrl-Del k for added oomph.

Note that the mouse in Accent is in relative mode, which is awkward to emulate
with a mouse; you can hold the "off tablet" key (Windows: Alt, Mac: Command)
and relocate the host's mouse, then release.  The PERQ will compute relative
movement based on the direction of the next swipe, not the absolute coordinates
in the window.  You'll catch on with a few tries. :-)

Button, button, who's got the button?  Accent S4 only enables the 4-button
BitPad puck, though it maps the buttons to match the 3-button Kriz puck.  If
you have a 3-button mouse, left-middle-right should be mapped appropriately.
For a two-button mouse, Ctrl-Left simulates the third button; Ctrl-Right
simulates the fourth PERQ button.  If you are using an old one-button Apple
mouse, I just don't know what to tell ya...

There is no clean way to log out of Accent, so the best way to make sure you
flush buffers to disk (if you want to save your work) is to type "trap" at
the Shell.  This will bring up the kernel debugger which will scribble in
reverse video all over your screen.  From there type 'y' to exit to the pager
process, and at that point there's no going back; switch to the PERQemu
debugger window and hit Ctrl-c to stop execution, save or reset as desired.


2.4 PNX
-------

A complete PNX 1.3 hard disk image and a full floppy set is available!

PNX, another unfortunately named PERQ operating system, was a very early Unix
V7/System III mashup that included an in-kernel window manager - possibly one
of the first Unix variants to do so.  This was primarily run on PERQs in the
UK, where PNX was developed by ICL.  Because the on-disk format is based on
the Unix filesystem, it cannot co-reside on a disk with POS or Accent (which
share a common underlying filesystem layout).  PNX also used its own language
interpreter, running an instruction set more favorable to C than the original
PERQ Q-codes.  However, PERQemu's debugger cannot accurately disassemble PNX
C-codes, since we don't currently have access to any PNX source code or
documentation.

There is currently no extra software for this version of PNX besides the very
basic install image.  With upcoming enhancements to the emulator, there are
several newer versions of PNX to try out; watch this space!


3.0 Command Line Operations
===========================

Hit Ctrl+C when the debugger window has focus to break into the debugger at any 
time.  Hit "Tab" to see a list of command completions.  You do not need to type 
in an entire command to run it, only enough to disambiguate it from other
commands.  For example "l h" is short for "load harddisk" and "d m" is short
for "disassemble microcode".

"Tab" will always show completions at any point during input.  For example,
if you type "show" and hit tab, you will be presented with a list of possible
completions for the "show" command.  Commands are not case-sensitive, though
arguments may be (such as filenames, if your filesystem respects case).

The debugger is a work-in-progress and some commands may be unintuitive or
unfinished.  The more useful (and implemented) ones are:

    GO - begins emulation execution from the current microcode PC.

    RESET - resets the virtual PERQ.  Disk images are NOT reloaded, which makes
        this useful for rebooting the PERQ when installing an OS, for example.

    SET BOOTCHAR <char> - helper to make it easier to boot from an alternate
        boot.  The D.6 image has two available boots: 'a' and 'z'.  'a' is the
        default (POS), 'z' is Accent S4.  [UGH this is broken at the moment]


    [Disk commands below in "Working with storage devices"]


    SAVE SCREENSHOT <name> - saves a JPEG image of the current PERQ display.
        [Has to be rewritten for SDL]

    SET RS232 <port name> - selects the serial port on the host machine to use
        for the emulated PERQ.  "RSX:" is a special port which allows transfer
        of files to/from the emulation host.  If RSX: is selected as the port,
        from POS one can "COPY RSX:c:\path\to\hostfile.pas sys:foo>bar>baz.pas"
        and the file will be copied from the host OS to the emulated PERQ; this
        works for text (7-bit ASCII) only.  (It's also quite slow, since it has
        to run at serial speeds).  [Untested!]


In the Debug build, there are a huge number of additional commands to inspect
the state of the emulator and assist with debugging PERQ microcode.  These
are not yet documented.


[is this in the readme-source?]

  Though the Kriz tablets were rarely connected to a PERQ-1, they were supported
  and are FAR more efficient for the OS to handle than the BitPadOne's ASCII-
  serial data format so we enable them by default.  Note that Accent S4 only
  uses the GPIB tablet; PNX is untried at this point.  In POS F, you can choose
  which one to use with a switch to LOGIN (or in your login profile):
        LOGIN /TABLETTYPE=BITPAD    selects GPIB
        LOGIN /TABLETTYPE=TABLET    selects Kriz
  In the updated DETAILS program included with POS F.15, you can see which one
  is active for your current session by typing "DETAILS /ALL".
    

Working With Storage Devices
============================

3.0 Supported Devices
---------------------

The PERQ supports a range of storage devices, including floppy disk, hard disk
and tape drives.  Configuration of a specific model was limited by several
factors.  The maximum number of supported devices:

                            PERQ-1      PERQ-2      PERQemu[*]
    Floppy drives             1           1            2

    Internal hard disk:
        14" Shugart           1           -            2
        8" Micropolis         -           2            2
        5.25" MFM             -           2            4

    External hard drives:
        SMD                   -           ?            4

    Tape drives:
        QIC streamer          1           1            1


    [*] PERQemu currently supports only the maximum number of drives that
    the actual hardware supported, but in future releases (as software and
    microcode support is enhanced) we may expand the limits.

Each model could support one type of internal hard disk based on the chassis
type and I/O board selected, so the PERQ-2 could have two 8" or two 5.25" disk
drives, but not both.  The Configurator takes these factors into account when
setting up a PERQ.  All of the commands to load devices check that only the
correct type of image is attached to the disk controller in the virtual PERQ.

Note that while the 8" floppy drive was always listed as an "option," I've
never actually come across a PERQ that didn't have one attached.  Because it
is essentially "free" to emulate, all standard configurations in PERQemu have
a floppy drive attached as unit #0.  You may certainly configure a machine
without a floppy drive, but that option has not been exhaustively tested, and
you might encounter strange hangs or other unexpected behavior.


3.0.1 Unit Numbers
------------------

Each device in PERQemu is assigned a "unit #" to uniquely identify it when
more than one of a given type is configured.  In this release it's a very
straightforward mapping, as the options are quite limited:

    Unit 0:     Floppy drive    (all configurations)
    Unit 1:     Hard drive      (for PERQ-1, the only hard drive)
    Unit 2:     2nd hard drive  (only in PERQ-2 models)
    Unit 3:     Streamer tape   (optional; not yet implemented)

For compatibility with all versions of PERQemu prior to v0.5.0, the usual
"load floppy" and "load harddisk" commands are shortcuts for loading units 0
or 1, while new command syntax allows for specifying the unit number and many
commands can automatically determine which unit to assign.


3.0.2 The Disks Directory
-------------------------

In the discussion that follows, PERQemu assumes that all media files are stored
in the Disks/ directory provided in the distribution.  This is located in the
base directory (where PERQemu.exe resides) as discussed in the Organization
section above.

A simple algorithm is used to find files to load:

    1. look for the filename as given;
    2. look in Disks/ for the filename;
    3. if the file does not have an extension, try the list of known
       extensions in both the base and Disks/ directory.

While the distribution is currently just a handful of files, a curated archive
of many hundreds of floppy, tape and hard disk images is being assembled, so
it is recommended that you choose simple names and allow PERQemu to apply the
correct directory and file extensions when loading or saving media.  Future
releases may rename Disks/ or add Floppies/ and Tapes/ to the "search path" to
keep things manageable.

For now, any disk or floppy images you create or download should be dropped
into Disks/ so PERQemu can find them without a lot of typing. :-)


3.1 Supported Formats
---------------------

As of PERQemu v0.5.0, a new common media format has been devised to store all
of the supported storage devices.  Going forward, this PERQmedia file format
will be used by default, and as the library of curated disk images is expanded
you'll have a growing selection of floppy, hard disk and tape media to load
and explore with PERQemu.

All of the previous formats may still be used as well, and utilities are/will
be available to transpose between the formats (and take advantage of some the
new features in the PERQmedia format).  PERQemu recognizes these file types:

    PRQM format:  the new unified format; files end with ".prqm".  Can be
    used to store ANY supported PERQ storage device.

    PHD format:  files ending in ".phd" contain Shugart 12MB or 24MB hard
    disk images, suitable for use with older versions of PERQemu.  These
    drives are only supported on PERQ-1 models.

    IMD format:  floppy images in IMD format typically have the ".imd" file
    extension.  PERQemu can read and write these, and will preserve the
    media label information when transferred to/from PRQM format.

    PFD/raw format:  older floppy images might have a ".raw" or a ".pfd"
    extension.  These were likely converted from DMK or IMD images into a
    "raw" format with no metadata.  The "PFD" format was a brief and ill-
    advised flirtation with adding a small "cookie" to the first sector
    of a raw floppy image (undetectable by PERQemu or the emulated PERQ)
    that could provide some hints as to format and contents.

        Note:  While this version of PERQemu can read both formats,
        if asked to write a "raw" floppy it will always include the
        PFD cookie and will append/replace the extension with ".pfd"
        to more uniquely identify the image.

The most compelling argument in favor of translating images into the new PRQM
format is that it provides both data compression and a CRC for verifying the
integrity of the archive.  Plus, both textual and graphical labels may be 
stored in the archive, so the PERQemu interface may/will be extended to show
the labels to aid in selecting files to load.


3.2 Basic Operation
-------------------

    Important:  PERQemu always operates on an in-memory copy of the loaded
    storage devices.  While this means you are free to explore with impunity
    and wreak all sorts of havoc without risk -- simply don't save the disk
    or tape image when shutting down -- it also means that changes you DO
    want to keep must be manually saved.

3.2.1 Configuration
-------------------

The Configurator has one basic command to assign media files to the storage
devices defined for given machine configuration:

    > configure assign <file>
or
    > configure assign <unit> <file>

These two forms associate the media file with the appropriate device.  In the
first case, <file> is read and PERQemu identifies the type of image it contains
and attempts to assign it to the proper device.  This means that a file
containing a floppy image will automatically be assigned to unit 0, the floppy
drive.  Hard disks will be assigned first to unit 1, which is always the "boot
drive" on all PERQs.  When the PERQ-2 models are suported, assigning a second
hard disk will automatically assign it to unit 2.  PERQemu will, as expected,
assign tape images to unit 3, once the QIC streamer is implemented.

In the second case, PERQemu examines <file> to make sure it can be loaded into
the device specified by the given unit #, i.e., the second drive in a two-drive
PERQ-2.  This will be more important in future releases when emulation expands
to incorporate more device types and larger configurations.

All assignments made are loaded when the "power on" command is issued to start
the emulator.  Also, assigned devices are saved with the configuration record,
so you can associate a specific storage configuration with a machine:

    > configure name myperq
    > configure assign f15dev.phd
    > configure save

Then to come back to that configuration in the future:

    > configure load myperq
    > go

Note that the "assign" command only operates on the configuration record and
does not alter the running machine.  The next section explains how runtime
commands may be used to dynamically load removable media while the emulator
is running.


3.2.2 Runtime Operation
-----------------------

PERQemu now provides a new "storage" subsystem that offers a set of more
general commands for loading, unloading and saving disk images, along with
new commands for creating new blank media and even defining new types of
storage devices.  These are discussed in section 3.2.3, "Storage Commands".
The previous PERQemu syntax is still available, though, providing useful
shortcuts for the most common operations.

For compatibility with earlier PERQemu syntax, the following commands are
recognized:

    > load floppy <file>
    > unload floppy
    > save floppy

    > load harddisk <file>
    > unload harddisk
    > save harddisk

Each of these commands will do the "expected" thing in configuration mode,
essentially updating the current media assignments in the same way the new
"assign" command does:

    > configure assign <file>

is equivalent to

    > load floppy <file>
or
    > load harddisk <file>

depending on the contents of <file>.  The unload and save commands (discussed
in more detail below) also behave in largely the same way as before.  However,
when the "power on" command has been issued and the PERQ emulation is started,
these commands behave a little differently:

    > load floppy <file>
    > save floppy
    > unload floppy

Because the floppy drive contains removable media, PERQemu allows these at any
time.  As the internal hard drives in the PERQ are not "removable", a load or
unload of a hard disk image is not allowed when the emulator is running, so it
must be stopped first.  Here are conditions:

    Loading a floppy can happen at any time; both the configuration and
    running emulator "see" the change and the PERQ does not have to be
    halted to change diskettes.  Attempting to "load" a new floppy while
    the drive is already loaded produces a gentle reminder to "unload"
    (and save, if desired) first.

    Saving a loaded floppy may happen at any time.  You may optionally
    save a copy (without overwriting the original) by providing a new
    name, and specify a different file format as well:

        > save floppy <newfile> [<newfmt>]

    will create a copy in <newfile>, optionally using the format given
    as <newfmt>.  The configuration record is updated to reflect the
    new name.

    Unloading a floppy may happen at any time.  If the floppy has been
    modified and you have set the "autosave floppy on eject" preference
    to "yes" it will be saved automatically to the same name (and in the
    same format) as it was loaded from.  If set to "no" the floppy will
    be ejected and unsaved changes lost.  [Note that "ask" mode is not
    yet implemented.]

These same rules will apply to other removable media, as they are implemented:
the QIC tape drive and (in a far distant future) removable pack SMD drives will
work in the same manner.

Fixed hard drives, however, may NOT be loaded or unloaded when the emulator is
running.  Attempts to do so will provide a reminder to shut down the PERQ first
before reconfiguring.  Thus:

    Loading a hard drive may happen while the machine is not yet started,
    or when it is in the "halted" state.  This can happen if PERQemu
    encounted a problem trying to load the drives from the configuration,
    as might happen if a file referenced by a saved configuration was
    corrupted, renamed or removed.  Successfully loading a new disk image,
    followed by a "reset" command will allow the emulator to start.

    Saving a hard drive has the same options as shown above for floppies:

        > save harddisk <newfile> [<newfmt>]

    will create a new copy of the disk.  Note that PERQemu does not auto-
    matically pause for this operation; you might consider issuing the
    "stop" command prior to saving.  [This may be a future enhancement?]

    Unloading a hard drive is generally disallowed unless the machine is
    shut down (or in the "halted" state).

As dual-drive configurations are not yet supported, there is no command syntax
to allow specifying he second drive for loading, unloading or saving.


3.2.3 Storage Commands
----------------------

A new, general interface for working with storage devices is provided by the
"storage" subsystem.  All of the "compatibility" commands available at the top-
level of the command tree map to the more general forms described below.

Creating a new media file requires simply a type and a file name:

    > storage create <type> <file> [<fmt>]

This will create a new, unformatted disk, floppy or tape image and save it to
disk.  The parameters:

    <type>  a predefined type that already has its drive class,
            geometry, and performance specifications defined; type

                > storage list

            to see what device types are available.

    <file>  may be a simple name or a full path specification; it
            is recommended that you let PERQemu organize your media
            files by adding the Disks/ directory prefix and filename
            extension appropriate for the chosen file format

    <fmt>   optionally specifies a particular file format, which must
            be capable of storing the type of image you wish to create;
            if not specified, PERQemu will choose the approriate file
            format [now: PHD for hard disks, IMD for floppies; soon
            PRQM for all devices!]

While this command may be run at any time, it may take some time to run and
could slow down the emulator significantly if a large image is being created.

The general form of the "load" commands given above is:

    > storage load <file>
    > storage load <unit> <file>

Because PERQmedia can simply probe <file> to determine what it contains, the
aliases "floppy", "harddisk" and "tape" simply refer to the default unit number
based on the (currently limited) available configurations.

Similarly, the compatibility "unload" commands shown above map to:

    > storage unload <unit>

The "save" command, however, has a number of new variants.  The most general
form is:

    > storage save <unit> <file> <fmt>

where the unit and file parameters are obvious.  Selecting a formatter, though,
is new in v0.5.0.  If specified, PERQemu will attempt to save the device in the
format given, assuming that it's compatible with the media type.  Going forward
the most obvious choice is to migrate ALL PERQ media files to PRQM format, as
it's the most complete and accommodating.  [A new Setting may be provided to
make this a settable preference -- "SaveAllMediaAsPRQM" or something like that]


3.2.4 Advanced Storage Commands
-------------------------------

The database of "known devices" that PERQemu can (theoretically/eventually)
work with is kept in Disks/StorageDevices.db.  At time of release, this list
contains all/most of the drive types that Three Rivers Computer/PERQ Systems
shipped back in the 1980s.  Quite a few additional types are thrown in for
fun, even though PERQemu does not yet support them.

At startup, the "storage define" commands are used to discreetly load this
file into the "known devices" list that you access with the "storage create"
or "storage list" commands.  In time, additional disk devices may be tested,
defined and incorporated into the distribution.  The syntax and detailed
implementation notes regarding the definition of storage devices will someday
be documented, but right now my hands hurt from all this typing and you've got
lots of existing drive types to play with. :-)

For now, the source code repository and the database itself are the documen-
tation.  Send me an email if you have a burning desire to attach some funky
new drive type and need assistance.  Moreover, note that the PRQM file format
is entirely self contained -- meaning you can create and distribute a custom
storage device created in PERQemu even if that type isn't in the database!


--
Last update:  skeezicsb     Thu Feb 17 19:32:09 PST 2022
